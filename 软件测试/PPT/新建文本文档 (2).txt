package work52;

public class mian {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Circle c = new Circle("green",true ,3.0);
		Rectangle r = new Rectangle("red",false,10.0,5.0);
		System.out.println("长方形的周长 :  "+r.Perimeter());
		System.out.println("长方形的面积 :  "+r.Area());
		System.out.println("长方形的颜色 :  "+r.getColor());
		System.out.println("长方形的是否填充: "+r.getStuff());
		System.out.println("长方形的长和宽: "+r.getLength()+r.getWidth()+"\n");		
		
		
		System.out.println("圆的周长 :  "+c.Perimeter());
		System.out.println("圆的面积 :  "+c.Area());
		System.out.println("圆的颜色 :  "+c.getColor());
		System.out.println("圆的是否填充: "+c.getStuff());
		System.out.println("圆的半径: "+c.getRadius()+"\n");

	
		Square s = new Square("yellow",false,4.0);
		System.out.println("正方形的周长 :  "+s.Perimeter());
		System.out.println("正方形的面积 :  "+s.Area());
		System.out.println("正方形的颜色 :  "+s.getColor());
		System.out.println("正方形的是否填充: "+s.getStuff());
		System.out.println("正方形的边长: "+s.getSide()+"\n");
		
		Graph[] g=new Graph[9];
		for(int i=0;i<3;i++){
			Circle c1=new Circle();
			g[i]=c1;
		}
		for(int i=3;i<6;i++){
			Square s1=new Square();
			g[i]=s1;
		}
		for(int i=6;i<9;i++){
			Rectangle r1=new Rectangle();
			g[i]=r1;
		}
		Graph max;
		max=g[0];
		for(int i=0;i<g.length;i++){
			if(max.compareTo(g[i])==-1){
				max=g[i];
			}
		}
		System.out.println("最大图形面积为： "+max.Area());
	}

}


package work52;

public abstract class Graph {
	private String color;
	private boolean stuff;
	
	public Graph() {}
	public Graph(String color,boolean stuff) {
		this.color = color;
		this.stuff = stuff;
	}
	
	public String getColor() {
		return color;
	}
	public void setColor(String color) {
		this.color = color ;
	}
	
	public boolean getStuff() {
		return stuff;
	}
	public void setStuff(boolean stuff) {
		this.stuff = stuff;
	}
	
	
	public abstract double Area();
	public abstract double Perimeter();
	
	public int compareTo(Graph swp) {
		if(this.Area()>swp.Area()){
			return 1;
		}
		else if (this.Area()<swp.Area()) {
			return -1;
		}
		else {
			return 0;
		}
	}	
		
}

package work52;

public interface Compere {
    int compareTo(Graph a);
}


package work52;

public class Rectangle extends Graph{
	public double length;
	public double width;
	public double perimeter;
	public double area;
	
	public double getLength() {
		return length;
	}
	public void setLength(double length) {
		this.length=length;
	}
	public double getWidth() {
		return width;
	}
	public void setWidth(double width) {
		this.width=width;
	}
	public Rectangle() {}
	public Rectangle(String color,boolean stuff,double length,double width) {
		super(color,stuff);
		this.length=length;
		this.width=width;
	}
	public double Perimeter() {
		// TODO Auto-generated method stub
		perimeter=2*(length+width);
		return perimeter;
	}
	public double Area() {
		// TODO Auto-generated method stub
		area=length*width;
		return area;
	}
	public int compareTo(Graph swp) {
		// TODO 自动生成的方法存根
		return 0;
	}
}


package work52;

public class  Circle extends Graph{
	private double radius;
	private double perimeter;
	private double area;
	
	public double getRadius() {
		return radius;
	}
	public void setRadius(double radius) {
		this.radius=radius;
	}
	public Circle() {}
	public Circle(String color,boolean stuff,double radius) {
		super(color,stuff);
		this.radius=radius;
	}
	
	public double Perimeter() {
		perimeter=2*radius*Math.PI;
		perimeter=(double)((Math.round(perimeter*100))/100.0);
		return perimeter;
	}
	public double Area() {
		area=radius*radius*Math.PI;
		area=(double)((Math.round(area*100))/100.0);
		return area;
	}
	public int compareTo(Graph swp) {
		// TODO 自动生成的方法存根
		return 0;
	}
}


package work52;

public class Square extends Graph{
	public double side;
	public double perimeter;
	public double area;
	
	public double getSide() {
		return side;
	}
	public void setSide(double side) {
		this.side=side;
	}
	public Square() {}
	public Square(String color,boolean stuff,double side) {
		super(color,stuff);
		this.side=side;
	}
	public double Perimeter() {
		perimeter=4*side;
		return perimeter;
	}

	public double Area() {
		area=side*side;
		return area;
	}
	public int compareTo(Graph swp) {
		// TODO 自动生成的方法存根
		return 0;
	}
}
