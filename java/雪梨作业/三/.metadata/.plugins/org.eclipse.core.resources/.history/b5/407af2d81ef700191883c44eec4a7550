package ZhengW;

import org.apache.commons.collections4.functors.IfClosure;
import org.apache.poi.xdgf.usermodel.section.geometry.Ellipse;

public class triangle {
	private line m;
	private line n;
	public void setM(line m) {
		this.m=m;
	}
	public line getM() {
		return m;
	}
	public void setN(line n) {
		this.n=n;
	}
	public line getN() {
		return n;
	}
	
	
//	if(m.getA()==n.getB()){
//		a=m.getA();
//		b=m.getB();
//		c=n.getB();
//	}else if(m.getA()==n.getA()){
//		a=m.getA();
//		b=m.getA();
//		c=n.getB();
//	}else if(m.getB()==n.getA()){
//		a=m.getA();
//		b=m.getB();
//		c=n.getB();
//	}else(m.getB()==n.getB()){
//		a=m.getA();
//		b=m.getB();
//		c=n.getA();
//	}
	
	public triangle(point a,point b,point c) {
		
		
	    double mlength=Math.sqrt((a.getX()-b.getX())*(a.getX()-b.getX())+(a.getY()-b.getY())*(a.getY()-b.getY()));
	   	double nlength=Math.sqrt((a.getX()-c.getX())*(a.getX()-c.getX())+(a.getY()-c.getY())*(a.getY()-c.getY()));
	   	double lastlength=Math.sqrt((b.getX()-c.getX())*(b.getX()-c.getX())+(b.getY()-c.getY())*(b.getY()-c.getY()));
		if(mlength+nlength>lastlength&&mlength+lastlength>nlength&&lastlength+nlength>mlength) {
//			this.a=a;
//			this.b=b;
//			this.c=c;
			//没用
		}
		else {
			System.out.println("创建三角形错误");
		}
	}
	public double getC(point a,point b,point c) {
	    double mlength=Math.sqrt((a.getX()-b.getX())*(a.getX()-b.getX())+(a.getY()-b.getY())*(a.getY()-b.getY()));
	   	double nlength=Math.sqrt((a.getX()-c.getX())*(a.getX()-c.getX())+(a.getY()-c.getY())*(a.getY()-c.getY()));
	   	double lastlength=Math.sqrt((b.getX()-c.getX())*(b.getX()-c.getX())+(b.getY()-c.getY())*(b.getY()-c.getY()));
	   	if(mlength+nlength>lastlength&&mlength+lastlength>nlength&&lastlength+nlength>mlength) {
	   		return  mlength+nlength+lastlength;
	   	}
	   	else {
	   		return-1;
	   	}
	}
	public  triangle(line m,line n) {
		
		point a = null,b = null,c = null;
//		a=m.getA();
//		b=m.getB();
//		c=n.getB();//这只传进了两根线，但是不知道，他们的哪两个点是一个点，需要判断
		
		if(m.getA()==n.getB()){
			a=m.getA();
			b=m.getB();
			c=n.getB();
		}else if(m.getA()==n.getA()){
			a=m.getA();
			b=m.getA();
			c=n.getB();
		}else if(m.getB()==n.getA()){
			a=m.getA();
			b=m.getB();
			c=n.getB();
		}else if(m.getB()==n.getB()){
			a=m.getA();
			b=m.getB();
			c=n.getA();
		}
	    double mlength=Math.sqrt((a.getX()-b.getX())*(a.getX()-b.getX())+(a.getY()-b.getY())*(a.getY()-b.getY()));
	   	double nlength=Math.sqrt((a.getX()-c.getX())*(a.getX()-c.getX())+(a.getY()-c.getY())*(a.getY()-c.getY()));
	   	double lastlength=Math.sqrt((b.getX()-c.getX())*(b.getX()-c.getX())+(b.getY()-c.getY())*(b.getY()-c.getY()));
	   	if(mlength+nlength>lastlength&&mlength+lastlength>nlength&&lastlength+nlength>mlength) {
	   		this.m=m;
	   		this.n=n;
	   	}
	   	else {
			System.out.println("创建三角形错误");
		}
}
	public  double getC(line m,line n) {
		point a = null,b = null,c = null;
//		a=m.getA();
//		b=m.getB();
//		c=n.getB();//这只传进了两根线，但是不知道，他们的哪两个点是一个点，需要判断
		
		if(m.getA()==n.getB()){
			a=m.getA();
			b=m.getB();
			c=n.getB();
		}else if(m.getA()==n.getA()){
			a=m.getA();
			b=m.getA();
			c=n.getB();
		}else if(m.getB()==n.getA()){
			a=m.getA();
			b=m.getB();
			c=n.getB();
		}else if(m.getB()==n.getB()){
			a=m.getA();
			b=m.getB();
			c=n.getA();
		}
	    double mlength=Math.sqrt((a.getX()-b.getX())*(a.getX()-b.getX())+(a.getY()-b.getY())*(a.getY()-b.getY()));
	   	double nlength=Math.sqrt((a.getX()-c.getX())*(a.getX()-c.getX())+(a.getY()-c.getY())*(a.getY()-c.getY()));
	   	double lastlength=Math.sqrt((b.getX()-c.getX())*(b.getX()-c.getX())+(b.getY()-c.getY())*(b.getY()-c.getY()));
		if(mlength+nlength>lastlength&&mlength+lastlength>nlength&&lastlength+nlength>mlength) {
	   		return  mlength+nlength+lastlength;
	   	}
	   	else {
	   		return-1;
	   	}
	}
	public triangle() {
		point a=new point();
		point b=new point();
		point c=new point();
		a.setX(0);
		a.setY(0);
		a.setX(1);
		a.setY(0);
		a.setX(0);
		a.setY(1);
		line m=new line();
        line n=new line();
        m.setA(a);
		m.setB(b);
		n.setA(a);
		n.setB(c);
		double mlength=Math.sqrt((a.getX()-b.getX())*(a.getX()-b.getX())+(a.getY()-b.getY())*(a.getY()-b.getY()));
	   	double nlength=Math.sqrt((a.getX()-c.getX())*(a.getX()-c.getX())+(a.getY()-c.getY())*(a.getY()-c.getY()));
	   	double lastlength=Math.sqrt((b.getX()-c.getX())*(b.getX()-c.getX())+(b.getY()-c.getY())*(b.getY()-c.getY()));
		if(mlength+nlength>lastlength&&mlength+lastlength>nlength&&lastlength+nlength>mlength) {
	   		this.m=m;
	   		this.n=n;
	   	}
	}
	public double  getC() {
		return 3.414213562373095;
	}
	
}